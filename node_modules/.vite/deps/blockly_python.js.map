{
  "version": 3,
  "sources": ["../../blockly/generators/python/lists.ts", "../../blockly/generators/python/logic.ts", "../../blockly/generators/python/loops.ts", "../../blockly/generators/python/math.ts", "../../blockly/generators/python/procedures.ts", "../../blockly/generators/python/text.ts", "../../blockly/generators/python/variables.ts", "../../blockly/generators/python/python_generator.ts", "../../blockly/generators/python/variables_dynamic.ts", "../../blockly/generators/python.ts", "../../blockly/python.mjs"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for list blocks.\n */\n\n// Former goog.module ID: Blockly.Python.lists\n\nimport type {CreateWithBlock} from '../../blocks/lists.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function lists_create_empty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n}\n\nexport function lists_create_with(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a list with any number of elements of any type.\n  const createWithBlock = block as CreateWithBlock;\n  const elements = new Array(createWithBlock.itemCount_);\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n}\n\nexport function lists_repeat(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a list with one element repeated.\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const times =\n    generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  const code = '[' + item + '] * ' + times;\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function lists_length(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\n}\n\nexport function lists_isEmpty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  const code = 'not len(' + list + ')';\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function lists_indexOf(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let firstIndexAdjustment = '';\n  let lastIndexAdjustment = ' - 1';\n\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    firstIndexAdjustment = ' + 1';\n    lastIndexAdjustment = '';\n  }\n\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_(\n      'first_index',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = my_list.index(elem)${firstIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`,\n    );\n  } else {\n    functionName = generator.provideFunction_(\n      'last_index',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`,\n    );\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_getIndex(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] | string {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(0)';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(0)\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '[-1]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop()\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      if (mode === 'GET') {\n        const code = 'random.choice(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else {\n        const functionName = generator.provideFunction_(\n          'lists_remove_random_item',\n          `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  x = int(random.random() * len(myList))\n  return myList.pop(x)\n`,\n        );\n        const code = functionName + '(' + list + ')';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + '\\n';\n        }\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n}\n\nexport function lists_setIndex(block: Block, generator: PythonGenerator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar = generator.nameDB_!.getDistinctName(\n      'tmp_list',\n      NameType.VARIABLE,\n    );\n    const code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        return list + '[-1] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.append(' + value + ')\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      let code = cacheList();\n      const xVar = generator.nameDB_!.getDistinctName(\n        'tmp_x',\n        NameType.VARIABLE,\n      );\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + '\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n}\n\nexport function lists_getSublist(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\n          'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n}\n\nexport function lists_sort(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const type = block.getFieldValue('TYPE');\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\n  const sortFunctionName = generator.provideFunction_(\n    'lists_sort',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\n  def try_float(s):\n    try:\n      return float(s)\n    except:\n      return 0\n  key_funcs = {\n    \"NUMERIC\": try_float,\n    \"TEXT\": str,\n    \"IGNORE_CASE\": lambda s: str(s).lower()\n  }\n  key_func = key_funcs[type]\n  list_cpy = list(my_list)\n  return sorted(list_cpy, key=key_func, reverse=reverse)\n`,\n  );\n\n  const code =\n    sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_split(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for splitting text into a list, or joining a list into text.\n  const mode = block.getFieldValue('MODE');\n  let code;\n  if (mode === 'SPLIT') {\n    const value_input =\n      generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\n    code = value_input + '.split(' + value_delim + ')';\n  } else if (mode === 'JOIN') {\n    const value_input =\n      generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\n    const value_delim =\n      generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\n    code = value_delim + '.join(' + value_input + ')';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_reverse(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'list(reversed(' + list + '))';\n  return [code, Order.FUNCTION_CALL];\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for logic blocks.\n */\n\n// Former goog.module ID: Blockly.Python.logic\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function controls_if(block: Block, generator: PythonGenerator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '',\n    branchCode,\n    conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\n    branchCode = generator.statementToCode(block, 'DO' + n) || generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    if (block.getInput('ELSE')) {\n      branchCode = generator.statementToCode(block, 'ELSE') || generator.PASS;\n    } else {\n      branchCode = generator.PASS;\n    }\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n}\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Comparison operator.\n  const OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>=',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const order = Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_operation(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Operations 'and', 'or'.\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\n  const order = operator === 'and' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'False';\n    argument1 = 'False';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = operator === 'and' ? 'True' : 'False';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_negate(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Negation.\n  const argument0 =\n    generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\n  const code = 'not ' + argument0;\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function logic_boolean(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Boolean values true and false.\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'True' : 'False';\n  return [code, Order.ATOMIC];\n}\n\nexport function logic_null(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Null data type.\n  return ['None', Order.ATOMIC];\n}\n\nexport function logic_ternary(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Ternary operator.\n  const value_if =\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\n  const value_then =\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\n  const value_else =\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\n  return [code, Order.CONDITIONAL];\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for loop blocks.\n */\n\n// Former goog.module ID: Blockly.Python.loops\n\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function controls_repeat_ext(block: Block, generator: PythonGenerator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const loopVar = generator.nameDB_!.getDistinctName(\n    'count',\n    NameType.VARIABLE,\n  );\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n}\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block: Block, generator: PythonGenerator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n    generator.valueToCode(\n      block,\n      'BOOL',\n      until ? Order.LOGICAL_NOT : Order.NONE,\n    ) || 'False';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ':\\n' + branch;\n}\n\nexport function controls_for(block: Block, generator: PythonGenerator) {\n  // For loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  let argument0: string | number =\n    generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  let argument1: string | number =\n    generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  let increment: string | number =\n    generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n\n  let code = '';\n  let range;\n\n  // Helper functions.\n  const defineUpRange = function () {\n    return generator.provideFunction_(\n      'upRange',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start <= stop:\n    yield start\n    start += abs(step)\n`,\n    );\n  };\n  const defineDownRange = function () {\n    return generator.provideFunction_(\n      'downRange',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start >= stop:\n    yield start\n    start -= abs(step)\n`,\n    );\n  };\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\n  const generateUpDownRange = function (\n    start: string,\n    end: string,\n    inc: string,\n  ) {\n    return (\n      '(' +\n      start +\n      ' <= ' +\n      end +\n      ') and ' +\n      defineUpRange() +\n      '(' +\n      start +\n      ', ' +\n      end +\n      ', ' +\n      inc +\n      ') or ' +\n      defineDownRange() +\n      '(' +\n      start +\n      ', ' +\n      end +\n      ', ' +\n      inc +\n      ')'\n    );\n  };\n\n  if (\n    stringUtils.isNumber(argument0) &&\n    stringUtils.isNumber(argument1) &&\n    stringUtils.isNumber(increment)\n  ) {\n    // All parameters are simple numbers.\n    argument0 = Number(argument0);\n    argument1 = Number(argument1);\n    increment = Math.abs(Number(increment));\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\n      // All parameters are integers.\n      if (argument0 <= argument1) {\n        // Count up.\n        argument1++;\n        if (argument0 === 0 && increment === 1) {\n          // If starting index is 0, omit it.\n          range = argument1;\n        } else {\n          range = argument0 + ', ' + argument1;\n        }\n        // If increment isn't 1, it must be explicit.\n        if (increment !== 1) {\n          range += ', ' + increment;\n        }\n      } else {\n        // Count down.\n        argument1--;\n        range = argument0 + ', ' + argument1 + ', -' + increment;\n      }\n      range = 'range(' + range + ')';\n    } else {\n      // At least one of the parameters is not an integer.\n      if (argument0 < argument1) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\n    }\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    const scrub = function (arg: string, suffix: string) {\n      if (stringUtils.isNumber(arg)) {\n        // Simple number.\n        arg = String(Number(arg));\n      } else if (!arg.match(/^\\w+$/)) {\n        // Not a variable, it's complicated.\n        const varName = generator.nameDB_!.getDistinctName(\n          variable0 + suffix,\n          NameType.VARIABLE,\n        );\n        code += varName + ' = ' + arg + '\\n';\n        arg = varName;\n      }\n      return arg;\n    };\n    const startVar = scrub(argument0, '_start');\n    const endVar = scrub(argument1, '_end');\n    const incVar = scrub(increment, '_inc');\n\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\n      if (startVar < endVar) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\n    } else {\n      // We cannot determine direction statically.\n      range = generateUpDownRange(startVar, endVar, incVar);\n    }\n  }\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\n  return code;\n}\n\nexport function controls_forEach(block: Block, generator: PythonGenerator) {\n  // For each loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n}\n\nexport function controls_flow_statements(\n  block: Block,\n  generator: PythonGenerator,\n) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + 'continue\\n';\n  }\n  throw Error('Unknown flow statement.');\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for math blocks.\n */\n\n// Former goog.module ID: Blockly.Python.math\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\n// If any new block imports any library, add that library name here.\n// RESERVED WORDS: 'math,random,Number'\n\nexport function math_number(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Numeric value.\n  let number = Number(block.getFieldValue('NUM'));\n  if (number === Infinity) {\n    return ['float(\"inf\")', Order.FUNCTION_CALL];\n  } else if (number === -Infinity) {\n    return ['-float(\"inf\")', Order.UNARY_SIGN];\n  } else {\n    return [String(number), number < 0 ? Order.UNARY_SIGN : Order.ATOMIC];\n  }\n}\n\nexport function math_arithmetic(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Basic arithmetic operators, and power.\n  const OPERATORS: Record<string, [string | null, Order]> = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ** ', Order.EXPONENTIATION],\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n  // In case of 'DIVIDE', division between integers returns different results\n  // in generator 2 and 3. However, is not an issue since Blockly does not\n  // guarantee identical results in all languages.  To do otherwise would\n  // require every operator to be wrapped in a function call.  This would kill\n  // legibility of the generated code.\n}\n\nexport function math_single(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\n    return ['-' + code, Order.UNARY_SIGN];\n  }\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected (here and below).\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'math.fabs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log10(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'COS':\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'TAN':\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ASIN':\n      code = 'math.asin(' + arg + ') / math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'math.acos(' + arg + ') / math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'math.atan(' + arg + ') / math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function math_constant(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS: Record<string, [string, Order]> = {\n    'PI': ['math.pi', Order.MEMBER],\n    'E': ['math.e', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\n    'INFINITY': [\"float('inf')\", Order.ATOMIC],\n  };\n  type ConstantOption = keyof typeof CONSTANTS;\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\n  if (constant !== 'INFINITY') {\n    (generator as AnyDuringMigration).definitions_['import_math'] =\n      'import math';\n  }\n  return CONSTANTS[constant];\n}\n\nexport function math_number_property(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  type PropertyOption = keyof typeof PROPERTIES;\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    (generator as AnyDuringMigration).definitions_['import_math'] =\n      'import math';\n    (generator as AnyDuringMigration).definitions_[\n      'from_numbers_import_Number'\n    ] = 'from numbers import Number';\n    const functionName = generator.provideFunction_(\n      'math_isPrime',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  # If n is not a number but a string, try parsing it.\n  if not isinstance(n, Number):\n    try:\n      n = float(n)\n    except:\n      return False\n  if n == 2 or n == 3:\n    return True\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\n    return False\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\n      return False\n  return True\n`,\n    );\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\n    if (divisor === '0') {\n      return ['False', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n}\n\nexport function math_change(block: Block, generator: PythonGenerator) {\n  // Add to a variable in place.\n  (generator as AnyDuringMigration).definitions_['from_numbers_import_Number'] =\n    'from numbers import Number';\n  const argument0 =\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return (\n    varName +\n    ' = (' +\n    varName +\n    ' if isinstance(' +\n    varName +\n    ', Number) else 0) + ' +\n    argument0 +\n    '\\n'\n  );\n}\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM':\n      code = 'sum(' + list + ')';\n      break;\n    case 'MIN':\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      (generator as AnyDuringMigration).definitions_[\n        'from_numbers_import_Number'\n      ] = 'from numbers import Number';\n      // This operation excludes null and values that aren't int or float:\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\n      const functionName = generator.provideFunction_(\n        'math_mean',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = [e for e in myList if isinstance(e, Number)]\n  if not localList: return\n  return float(sum(localList)) / len(localList)\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      (generator as AnyDuringMigration).definitions_[\n        'from_numbers_import_Number'\n      ] = 'from numbers import Number';\n      // This operation excludes null values:\n      // math_median([null, null, 1, 3]) -> 2.0\n      const functionName = generator.provideFunction_(\n        'math_median',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = sorted([e for e in myList if isinstance(e, Number)])\n  if not localList: return\n  if len(localList) % 2 == 0:\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\n  else:\n    return localList[(len(localList) - 1) // 2]\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_(\n        'math_modes',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\n  modes = []\n  # Using a lists of [item, count] to keep count rather than dict\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\n  counts = []\n  maxCount = 1\n  for item in some_list:\n    found = False\n    for count in counts:\n      if count[0] == item:\n        count[1] += 1\n        maxCount = max(maxCount, count[1])\n        found = True\n    if not found:\n      counts.append([item, 1])\n  for counted_item, item_count in counts:\n    if item_count == maxCount:\n      modes.append(counted_item)\n  return modes\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      (generator as AnyDuringMigration).definitions_['import_math'] =\n        'import math';\n      const functionName = generator.provideFunction_(\n        'math_standard_deviation',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\n  n = len(numbers)\n  if n == 0: return\n  mean = float(sum(numbers)) / n\n  variance = sum((x - mean) ** 2 for x in numbers) / n\n  return math.sqrt(variance)\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM':\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      code = 'random.choice(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_modulo(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Remainder computation.\n  const argument0 =\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function math_constrain(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n    generator.valueToCode(block, 'HIGH', Order.NONE) || \"float('inf')\";\n  const code =\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_int(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Random integer between [X] and [Y].\n  (generator as AnyDuringMigration).definitions_['import_random'] =\n    'import random';\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_float(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Random fraction between 0 and 1.\n  (generator as AnyDuringMigration).definitions_['import_random'] =\n    'import random';\n  return ['random.random()', Order.FUNCTION_CALL];\n}\n\nexport function math_atan2(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\n    Order.MULTIPLICATIVE,\n  ];\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.Python.procedures\n\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport * as Variables from '../../core/variables.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function procedures_defreturn(block: Block, generator: PythonGenerator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (const variable of usedVariables) {\n    const varName = variable.getName();\n    // getVars returns parameter names, not ids, for procedure blocks\n    if (!block.getVars().includes(varName)) {\n      globals.push(generator.getVariableName(varName));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\n    );\n  }\n\n  const globalString = globals.length\n    ? generator.INDENT + 'global ' + globals.join(', ') + '\\n'\n    : '';\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n      generator.INDENT,\n    );\n  }\n  let branch = '';\n  if (block.getInput('STACK')) {\n    // The 'procedures_defreturn' block might not have a STACK input.\n    branch = generator.statementToCode(block, 'STACK');\n  }\n  let returnValue = '';\n  if (block.getInput('RETURN')) {\n    // The 'procedures_defnoreturn' block (which shares this code)\n    // does not have a RETURN input.\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  }\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = generator.PASS;\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code =\n    'def ' +\n    funcName +\n    '(' +\n    args.join(', ') +\n    '):\\n' +\n    globalString +\n    xfix1 +\n    loopTrap +\n    branch +\n    xfix2 +\n    returnValue;\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\n  return null;\n}\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function procedures_callnoreturn(\n  block: Block,\n  generator: PythonGenerator,\n) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator)!;\n  return tuple[0] + '\\n';\n}\n\nexport function procedures_ifreturn(block: Block, generator: PythonGenerator) {\n  // Conditionally return value from a procedure.\n  const condition =\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\n  let code = 'if ' + condition + ':\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\n      generator.INDENT,\n    );\n  }\n  if ((block as IfReturnBlock).hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  return code;\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for text blocks.\n */\n\n// Former goog.module ID: Blockly.Python.texts\n\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function text(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n}\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'str(...)' function.\n * Leave string literals alone.\n *\n * @param value Code evaluating to a value.\n * @returns Array containing code evaluating to a string\n *     and\n *    the order of the returned code.[string, number]\n */\nconst forceString = function (value: string): [string, Order] {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_join(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a string made up of any number of elements of any type.\n  // Should we allow joining by '-' or ',' or any other characters?\n  const joinBlock = block as JoinMutatorBlock;\n  switch (joinBlock.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const element1 = generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITIVE];\n    }\n    default: {\n      const elements = [];\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\n        elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const tempVar = generator.nameDB_!.getDistinctName(\n        'x',\n        NameType.VARIABLE,\n      );\n      const code =\n        \"''.join([str(\" +\n        tempVar +\n        ') for ' +\n        tempVar +\n        ' in [' +\n        elements.join(', ') +\n        ']])';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n}\n\nexport function text_append(block: Block, generator: PythonGenerator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\n}\n\nexport function text_length(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\n}\n\nexport function text_isEmpty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  const code = 'not len(' + text + ')';\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function text_indexOf(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Search the text for a substring.\n  // Should we allow for non-case sensitive???\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_charAt(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.MEMBER];\n    }\n    case 'LAST': {\n      const code = text + '[-1]';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'RANDOM': {\n      // TODO(#7600): find better approach than casting to any to override\n      // CodeGenerator declaring .definitions protected (here and below).\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      const functionName = generator.provideFunction_(\n        'text_random_letter',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\n  x = int(random.random() * len(text))\n  return text[x]\n`,\n      );\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n}\n\nexport function text_getSubstring(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text = generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\n          'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n}\n\nexport function text_changeCase(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.upper()',\n    'LOWERCASE': '.lower()',\n    'TITLECASE': '.title()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_trim(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.lstrip()',\n    'RIGHT': '.rstrip()',\n    'BOTH': '.strip()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_print(block: Block, generator: PythonGenerator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n}\n\nexport function text_prompt_ext(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Prompt function.\n  const functionName = generator.provideFunction_(\n    'text_prompt',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\n  try:\n    return raw_input(msg)\n  except NameError:\n    return input(msg)\n`,\n  );\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = functionName + '(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'float(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = text + '.count(' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_replace(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replace(' + from + ', ' + to + ')';\n  return [code, Order.MEMBER];\n}\n\nexport function text_reverse(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + '[::-1]';\n  return [code, Order.MEMBER];\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for variable blocks.\n */\n\n// Former goog.module ID: Blockly.Python.variables\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function variables_get(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function variables_set(block: Block, generator: PythonGenerator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + '\\n';\n}\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Python code generator class, including helper methods for\n * generating Python for blocks.\n */\n\n// Former goog.module ID: Blockly.Python\n\nimport type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\nimport {Names} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport * as Variables from '../../core/variables.js';\nimport type {Workspace} from '../../core/workspace.js';\n\n/**\n * Order of operation ENUMs.\n * http://docs.python.org/reference/expressions.html#summary\n */\n// prettier-ignore\nexport enum Order {\n  ATOMIC = 0,             // 0 \"\" ...\n  COLLECTION = 1,         // tuples, lists, dictionaries\n  STRING_CONVERSION = 1,  // `expression...`\n  MEMBER = 2.1,           // . []\n  FUNCTION_CALL = 2.2,    // ()\n  EXPONENTIATION = 3,     // **\n  UNARY_SIGN = 4,         // + -\n  BITWISE_NOT = 4,        // ~\n  MULTIPLICATIVE = 5,     // * / // %\n  ADDITIVE = 6,           // + -\n  BITWISE_SHIFT = 7,      // << >>\n  BITWISE_AND = 8,        // &\n  BITWISE_XOR = 9,        // ^\n  BITWISE_OR = 10,        // |\n  RELATIONAL = 11,        // in, not in, is, is not, >, >=, <>, !=, ==\n  LOGICAL_NOT = 12,       // not\n  LOGICAL_AND = 13,       // and\n  LOGICAL_OR = 14,        // or\n  CONDITIONAL = 15,       // if else\n  LAMBDA = 16,            // lambda\n  NONE = 99,              // (...)\n}\n\n/**\n * PythonScript code generator class.\n */\nexport class PythonGenerator extends CodeGenerator {\n  /** List of outer-inner pairings that do NOT require parentheses. */\n  ORDER_OVERRIDES: [Order, Order][] = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // not (not foo) -> not not foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a and (b and c) -> a and b and c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a or (b or c) -> a or b or c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\n  ];\n\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  PASS: string = ''; // Initialised by init().\n\n  /** @param name Name of the language the generator is for. */\n  constructor(name = 'Python') {\n    super(name);\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      // Must assign Order[key] to a temporary to get the type guard to work;\n      // see https://github.com/microsoft/TypeScript/issues/10530.\n      const value = Order[key];\n      // Skip reverse-lookup entries in the enum.  Due to\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\n      // of TypeScript 5.5.2) actually narrows the type of value to\n      // never - but that still allows the following assignment to\n      // succeed.\n      if (typeof value === 'string') continue;\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // import keyword\n      // print(','.join(sorted(keyword.kwlist)))\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\n        'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\n        'not,or,pass,print,raise,return,try,while,with,yield,' +\n        // https://docs.python.org/3/library/constants.html\n        // https://docs.python.org/2/library/constants.html\n        'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\n        // >>> print(','.join(sorted(dir(__builtins__))))\n        // https://docs.python.org/3/library/functions.html\n        // https://docs.python.org/2/library/functions.html\n        'ArithmeticError,AssertionError,AttributeError,BaseException,' +\n        'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\n        'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\n        'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\n        'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\n        'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\n        'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\n        'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\n        'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\n        'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\n        'OverflowError,PendingDeprecationWarning,PermissionError,' +\n        'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\n        'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\n        'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\n        'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\n        'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\n        'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\n        '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\n        'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\n        'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\n        'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\n        'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\n        'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\n        'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\n        'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\n        'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\n        'vars,xrange,zip',\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   *\n   * @param workspace Workspace to generate code from.\n   */\n  init(workspace: Workspace) {\n    super.init(workspace);\n\n    this.PASS = this.INDENT + 'pass\\n';\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\n          ' = None',\n      );\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(this.getVariableName(variables[i].getId()) + ' = None');\n    }\n\n    this.definitions_['variables'] = defvars.join('\\n');\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   *\n   * @param code Generated code.\n   * @returns Completed code.\n   */\n  finish(code: string): string {\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_!.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.\n   *\n   * @param line Line of generated code.\n   * @returns Legal line of code.\n   */\n  scrubNakedValue(line: string): string {\n    return line + '\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Python string, complete with quotes.\n   *\n   * @param string Text to encode.\n   * @returns Python string.\n   */\n  quote_(string: string): string {\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\n\n    // Follow the CPython behaviour of repr() for a non-byte string.\n    let quote = \"'\";\n    if (string.includes(\"'\")) {\n      if (!string.includes('\"')) {\n        quote = '\"';\n      } else {\n        string = string.replace(/'/g, \"\\\\'\");\n      }\n    }\n    return quote + string + quote;\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Python string, complete\n   * with quotes.\n   *\n   * @param string Text to encode.\n   * @returns Python string.\n   */\n  multiline_quote_(string: string): string {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(\" + '\\\\n' + \\n\");\n  }\n\n  /**\n   * Common tasks for generating Python from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   *\n   * @param block The current block.\n   * @param code The Python code created for this block.\n   * @param thisOnly True to generate code for only this statement.\n   * @returns Python code with comments and subsequent blocks added.\n   */\n  scrub_(block: Block, code: string, thisOnly = false): string {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '# ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection!.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '# ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n      block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value, taking into account indexing.\n   * If a static int, casts to an integer, otherwise returns a code string.\n   *\n   * @param block The block.\n   * @param atId The ID of the input block to get (and adjust) the value of.\n   * @param delta Value to add.\n   * @param negate Whether to negate the value.\n   * @returns The adjusted value or code that evaluates to it.\n   */\n  getAdjustedInt(\n    block: Block,\n    atId: string,\n    delta = 0,\n    negate = false,\n  ): string | number {\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    const atOrder = delta ? Order.ADDITIVE : Order.NONE;\n    let at: string | number =\n      this.valueToCode(block, atId, atOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = 'int(' + at + ' + ' + delta + ')';\n      } else if (delta < 0) {\n        at = 'int(' + at + ' - ' + -delta + ')';\n      } else {\n        at = 'int(' + at + ')';\n      }\n      if (negate) {\n        at = '-' + at;\n      }\n    }\n    return at;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.Python.variablesDynamic\n\n// generator is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Instantiate a PythonGenerator and populate it with the\n * complete set of block generator functions for Python.  This is the\n * entrypoint for python_compressed.js.\n */\n\n// Former goog.module ID: Blockly.Python.all\n\nimport * as lists from './python/lists.js';\nimport * as logic from './python/logic.js';\nimport * as loops from './python/loops.js';\nimport * as math from './python/math.js';\nimport * as procedures from './python/procedures.js';\nimport {PythonGenerator} from './python/python_generator.js';\nimport * as text from './python/text.js';\nimport * as variables from './python/variables.js';\nimport * as variablesDynamic from './python/variables_dynamic.js';\n\nexport * from './python/python_generator.js';\n\n/**\n * Python code generator instance.\n * @type {!PythonGenerator}\n */\nexport const pythonGenerator = new PythonGenerator();\n\n// Add reserved words.  This list should include all words mentioned\n// in RESERVED WORDS: comments in the imports above.\npythonGenerator.addReservedWords('math,random,Number');\n\n// Install per-block-type generator functions:\n// Install per-block-type generator functions:\nconst generators: typeof pythonGenerator.forBlock = {\n  ...lists,\n  ...logic,\n  ...loops,\n  ...math,\n  ...procedures,\n  ...text,\n  ...variables,\n  ...variablesDynamic,\n};\nfor (const name in generators) {\n  pythonGenerator.forBlock[name] = generators[name];\n}\n", "import python from './python_compressed.js';\nexport const {\n  Order,\n  PythonGenerator,\n  pythonGenerator,\n} = python;\n"],
  "mappings": "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",
  "names": ["lists_create_empty", "block", "generator", "Order", "ATOMIC", "lists_create_with", "elements", "Array", "itemCount_", "i", "valueToCode", "NONE", "join", "lists_repeat", "item", "times", "MULTIPLICATIVE", "lists_length", "FUNCTION_CALL", "lists_isEmpty", "LOGICAL_NOT", "lists_indexOf", "list", "errorIndex", "firstIndexAdjustment", "lastIndexAdjustment", "workspace", "options", "oneBasedIndex", "getFieldValue", "provideFunction_", "FUNCTION_NAME_PLACEHOLDER_", "lists_getIndex", "mode", "where", "MEMBER", "at", "getAdjustedInt", "definitions_", "code", "functionName", "Error", "lists_setIndex", "value", "match", "listVar", "nameDB_", "getDistinctName", "NameType", "VARIABLE", "xVar", "lists_getSublist", "where1", "where2", "at1", "at2", "isNumber", "String", "lists_sort", "type", "sortFunctionName", "reverse", "lists_split", "value_input", "value_delim", "lists_reverse", "controls_if", "n", "branchCode", "conditionCode", "STATEMENT_PREFIX", "injectId", "statementToCode", "PASS", "STATEMENT_SUFFIX", "prefixLines", "INDENT", "getInput", "logic_compare", "operator", "OPERATORS", "order", "RELATIONAL", "argument0", "argument1", "logic_operation", "LOGICAL_AND", "LOGICAL_OR", "defaultArgument", "logic_negate", "logic_boolean", "logic_null", "logic_ternary", "value_if", "CONDITIONAL", "value_then", "value_else", "controls_repeat_ext", "repeats", "getField", "parseInt", "branch", "addLoopTrap", "loopVar", "controls_whileUntil", "until", "controls_for", "variable0", "getVariableName", "increment", "defineUpRange", "defineDownRange", "Number", "Math", "abs", "range", "scrub", "arg", "suffix", "varName", "startVar", "endVar", "incVar", "controls_forEach", "controls_flow_statements", "xfix", "loop", "getSurroundLoop", "suppressPrefixSuffix", "math_number", "number", "Infinity", "UNARY_SIGN", "math_arithmetic", "tuple", "ADDITIVE", "EXPONENTIATION", "math_single", "math_constant", "CONSTANTS", "constant", "math_number_property", "PROPERTIES", "dropdownProperty", "inputOrder", "outputOrder", "numberToCheck", "divisor", "math_change", "math_on_list", "func", "math_modulo", "math_constrain", "argument2", "math_random_int", "math_random_float", "math_atan2", "procedures_defreturn", "globals", "usedVariables", "allUsedVarModels", "variable", "getName", "getVars", "includes", "push", "devVarList", "allDeveloperVariables", "length", "DEVELOPER_VARIABLE", "funcName", "getProcedureName", "xfix1", "loopTrap", "INFINITE_LOOP_TRAP", "returnValue", "xfix2", "args", "variables", "globalString", "scrub_", "procedures_callreturn", "procedures_callnoreturn", "forBlock", "procedures_ifreturn", "hasReturnValue_", "text", "quote_", "text_join", "element", "forceString", "codeAndOrder", "element0", "element1", "tempVar", "text_append", "text_length", "text_isEmpty", "text_indexOf", "substring", "text_charAt", "text_getSubstring", "text_changeCase", "text_trim", "text_print", "text_prompt_ext", "msg", "text_count", "sub", "text_replace", "from", "to", "text_reverse", "variables_get", "variables_set", "COLLECTION", "STRING_CONVERSION", "BITWISE_NOT", "BITWISE_SHIFT", "BITWISE_AND", "BITWISE_XOR", "BITWISE_OR", "LAMBDA", "PythonGenerator", "CodeGenerator", "constructor", "name", "ORDER_OVERRIDES", "isInitialized", "key", "addReservedWords", "init", "reset", "Names", "RESERVED_WORDS_", "setVariableMap", "getVariableMap", "populateVariables", "populateProcedures", "defvars", "DEVELOPER_VARIABLE_TYPE", "getId", "finish", "imports", "definitions", "def", "replace", "scrubNakedValue", "line", "string", "quote", "multiline_quote_", "split", "map", "lines", "thisOnly", "commentCode", "outputConnection", "targetConnection", "comment", "getCommentText", "wrap", "COMMENT_WRAP", "inputList", "inputTypes", "VALUE", "childBlock", "connection", "targetBlock", "allNestedComments", "nextBlock", "nextConnection", "nextCode", "blockToCode", "atId", "delta", "negate", "defaultAtIndex", "$jscomp$tmp$exports$module$name", "controls_ifelse", "controls_repeat", "math_round", "math_trig", "procedures_defnoreturn", "strRegExp", "test", "text_prompt", "pythonGenerator", "generators", "lists", "logic", "loops", "math", "procedures", "variablesDynamic", "python"]
}
