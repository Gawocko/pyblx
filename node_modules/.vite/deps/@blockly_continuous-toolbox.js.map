{
  "version": 3,
  "sources": ["../../blockly/blockly.mjs", "../../@blockly/continuous-toolbox/src/ContinuousCategory.ts", "../../@blockly/continuous-toolbox/src/ContinuousFlyoutMetrics.ts", "../../@blockly/continuous-toolbox/src/RecyclableBlockFlyoutInflater.ts", "../../@blockly/continuous-toolbox/src/ContinuousFlyout.ts", "../../@blockly/continuous-toolbox/src/ContinuousMetrics.ts", "../../@blockly/continuous-toolbox/src/ContinuousToolbox.ts", "../../@blockly/continuous-toolbox/src/index.ts"],
  "sourcesContent": ["import Blockly from './blockly_compressed.js';\nexport const {\n  Block,\n  BlockFlyoutInflater,\n  BlockNavigationPolicy,\n  BlockSvg,\n  Blocks,\n  ButtonFlyoutInflater,\n  COLLAPSED_FIELD_NAME,\n  COLLAPSED_INPUT_NAME,\n  COLLAPSE_CHARS,\n  CodeGenerator,\n  CollapsibleToolboxCategory,\n  ComponentManager,\n  Connection,\n  ConnectionChecker,\n  ConnectionDB,\n  ConnectionNavigationPolicy,\n  ConnectionType,\n  ContextMenu,\n  ContextMenuItems,\n  ContextMenuRegistry,\n  Css,\n  DELETE_VARIABLE_ID,\n  DeleteArea,\n  DragTarget,\n  DropDownDiv,\n  Events,\n  Extensions,\n  Field,\n  FieldCheckbox,\n  FieldDropdown,\n  FieldImage,\n  FieldLabel,\n  FieldLabelSerializable,\n  FieldNavigationPolicy,\n  FieldNumber,\n  FieldTextInput,\n  FieldVariable,\n  Flyout,\n  FlyoutButton,\n  FlyoutButtonNavigationPolicy,\n  FlyoutItem,\n  FlyoutMetricsManager,\n  FlyoutNavigationPolicy,\n  FlyoutNavigator,\n  FlyoutSeparator,\n  FlyoutSeparatorNavigationPolicy,\n  FocusManager,\n  FocusableTreeTraverser,\n  Generator,\n  Gesture,\n  Grid,\n  HorizontalFlyout,\n  INPUT_VALUE,\n  Input,\n  InsertionMarkerPreviewer,\n  KeyboardNavigationController,\n  LabelFlyoutInflater,\n  LineCursor,\n  Marker,\n  MarkerManager,\n  Menu,\n  MenuItem,\n  MetricsManager,\n  Msg,\n  NEXT_STATEMENT,\n  Names,\n  Navigator,\n  OPPOSITE_TYPE,\n  OUTPUT_VALUE,\n  Options,\n  PREVIOUS_STATEMENT,\n  PROCEDURE_CATEGORY_NAME,\n  Procedures,\n  RENAME_VARIABLE_ID,\n  RenderedConnection,\n  Scrollbar,\n  ScrollbarPair,\n  SeparatorFlyoutInflater,\n  ShortcutItems,\n  ShortcutRegistry,\n  TOOLBOX_AT_BOTTOM,\n  TOOLBOX_AT_LEFT,\n  TOOLBOX_AT_RIGHT,\n  TOOLBOX_AT_TOP,\n  Theme,\n  ThemeManager,\n  Themes,\n  Toast,\n  Toolbox,\n  ToolboxCategory,\n  ToolboxItem,\n  ToolboxSeparator,\n  Tooltip,\n  Touch,\n  Trashcan,\n  UnattachedFieldError,\n  VARIABLE_CATEGORY_NAME,\n  VARIABLE_DYNAMIC_CATEGORY_NAME,\n  VERSION,\n  VariableMap,\n  VariableModel,\n  Variables,\n  VariablesDynamic,\n  VerticalFlyout,\n  WidgetDiv,\n  Workspace,\n  WorkspaceAudio,\n  WorkspaceDragger,\n  WorkspaceNavigationPolicy,\n  WorkspaceSvg,\n  Xml,\n  ZoomControls,\n  blockAnimations,\n  blockRendering,\n  browserEvents,\n  bubbles,\n  bumpObjects,\n  clipboard,\n  comments,\n  common,\n  config,\n  constants,\n  defineBlocksWithJsonArray,\n  dialog,\n  dragging,\n  fieldRegistry,\n  geras,\n  getFocusManager,\n  getMainWorkspace,\n  getSelected,\n  hasBubble,\n  hideChaff,\n  icons,\n  inject,\n  inputs,\n  isCopyable,\n  isDeletable,\n  isDraggable,\n  isIcon,\n  isObservable,\n  isPaster,\n  isRenderedElement,\n  isSelectable,\n  isSerializable,\n  isVariableBackedParameterModel,\n  keyboardNavigationController,\n  layers,\n  navigateBlock,\n  navigateStacks,\n  procedures,\n  registry,\n  renderManagement,\n  serialization,\n  setLocale,\n  setParentContainer,\n  svgResize,\n  thrasos,\n  uiPosition,\n  utils,\n  zelos,\n} = Blockly;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Toolbox category with styling for continuous toolbox.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/** Toolbox category for continuous toolbox. */\nexport class ContinuousCategory extends Blockly.ToolboxCategory {\n  /**\n   * Creates a DOM element to display the category's label.\n   *\n   * @param name The name of this category.\n   * @returns The newly created category label DOM element.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  override createLabelDom_(name: string): Element {\n    const label = document.createElement('div');\n    label.setAttribute('id', this.getId() + '.label');\n    label.textContent = name;\n    label.classList.add(this.cssConfig_['label'] ?? '');\n    return label;\n  }\n\n  /**\n   * Creates a DOM element to display the category's icon. This category uses\n   * color swatches instead of graphical icons.\n   *\n   * @returns The newly created category icon DOM element.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  override createIconDom_(): Element {\n    const icon = document.createElement('div');\n    icon.classList.add('categoryBubble');\n    icon.style.backgroundColor = this.colour_;\n    return icon;\n  }\n\n  /**\n   * Adds a color indicator to the toolbox category. Intentionally a no-op.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  override addColourBorder_() {\n    // No-op\n  }\n\n  /**\n   * Sets whether or not this category is selected in the toolbox.\n   *\n   * @param isSelected True if this category is selected, otherwise false.\n   */\n  override setSelected(isSelected: boolean) {\n    if (!this.rowDiv_ || !this.htmlDiv_) return;\n    if (isSelected) {\n      this.rowDiv_.style.backgroundColor = 'gray';\n      Blockly.utils.dom.addClass(\n        this.rowDiv_,\n        this.cssConfig_['selected'] ?? '',\n      );\n    } else {\n      this.rowDiv_.style.backgroundColor = '';\n      Blockly.utils.dom.removeClass(\n        this.rowDiv_,\n        this.cssConfig_['selected'] ?? '',\n      );\n    }\n    Blockly.utils.aria.setState(\n      this.htmlDiv_,\n      Blockly.utils.aria.State.SELECTED,\n      isSelected,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\nimport type {ContinuousFlyout} from './ContinuousFlyout';\n\n/** Adds additional padding to the bottom of the flyout if needed. */\nexport class ContinuousFlyoutMetrics extends Blockly.FlyoutMetricsManager {\n  /**\n   * Returns the metrics for the scroll area of the continuous flyout's\n   * workspace. Adds additional padding to the bottom of the flyout if needed in\n   * order to make it possible  to scroll to the top of the last category.\n   *\n   * @param getWorkspaceCoordinates True to get the scroll metrics in\n   *     workspace coordinates, false to get them in pixel coordinates.\n   * @param cachedViewMetrics The view metrics if they have been previously\n   *     computed.\n   * @param cachedContentMetrics The content metrics if they have been\n   *     previously computed.\n   * @returns The metrics for the scroll container.\n   */\n  override getScrollMetrics(\n    getWorkspaceCoordinates?: boolean,\n    cachedViewMetrics?: Blockly.MetricsManager.ContainerRegion,\n    cachedContentMetrics?: Blockly.MetricsManager.ContainerRegion,\n  ) {\n    const scrollMetrics = super.getScrollMetrics(\n      getWorkspaceCoordinates,\n      cachedViewMetrics,\n      cachedContentMetrics,\n    );\n    const contentMetrics =\n      cachedContentMetrics || this.getContentMetrics(getWorkspaceCoordinates);\n    const viewMetrics =\n      cachedViewMetrics || this.getViewMetrics(getWorkspaceCoordinates);\n\n    if (scrollMetrics) {\n      scrollMetrics.height += (\n        this.flyout_ as ContinuousFlyout\n      ).calculateBottomPadding(contentMetrics, viewMetrics);\n    }\n    return scrollMetrics;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * A block inflater that caches and reuses blocks to improve performance.\n */\nexport class RecyclableBlockFlyoutInflater extends Blockly.BlockFlyoutInflater {\n  /**\n   * Whether or not block recycling is enabled.\n   */\n  recyclingEnabled = false;\n\n  /**\n   * Map from block type to block instance.\n   */\n  private recycledBlocks = new Map<string, Blockly.BlockSvg>();\n\n  /**\n   * Custom function to use for checking whether or not blocks can be recycled.\n   */\n  recycleEligibilityChecker?: (block: Blockly.Block) => boolean;\n\n  /**\n   * Creates a new block from the given block definition.\n   *\n   * @param blockDefinition The definition to create a block from.\n   * @param workspace The workspace to create the block on.\n   * @returns The newly created block.\n   */\n  override createBlock(\n    blockDefinition: Blockly.utils.toolbox.BlockInfo,\n    workspace: Blockly.WorkspaceSvg,\n  ): Blockly.BlockSvg {\n    const blockType = this.getTypeFromDefinition(blockDefinition);\n    return (\n      this.getRecycledBlock(blockType) ??\n      super.createBlock(blockDefinition, workspace)\n    );\n  }\n\n  /**\n   * Returns the type of a block from an XML or JSON block definition.\n   *\n   * @param blockDefinition The block definition to parse.\n   * @returns The block type.\n   */\n  private getTypeFromDefinition(\n    blockDefinition: Blockly.utils.toolbox.BlockInfo,\n  ): string {\n    let type: string | null | undefined;\n    if (blockDefinition['blockxml']) {\n      const xml =\n        typeof blockDefinition['blockxml'] === 'string'\n          ? Blockly.utils.xml.textToDom(blockDefinition['blockxml'])\n          : (blockDefinition['blockxml'] as Element);\n      type = xml.getAttribute('type');\n    } else {\n      type = blockDefinition['type'];\n    }\n\n    if (!type) {\n      throw new Error(\n        `Block type is not specified in block definition: ${JSON.stringify(\n          blockDefinition,\n        )}`,\n      );\n    }\n    return type;\n  }\n\n  /**\n   * Puts a previously created block into the recycle bin and moves it to the\n   * top of the workspace. Used during large workspace swaps to limit the number\n   * of new DOM elements we need to create.\n   *\n   * @param block The block to recycle.\n   */\n  private recycleBlock(block: Blockly.BlockSvg) {\n    const xy = block.getRelativeToSurfaceXY();\n    block.moveBy(-xy.x, -xy.y);\n    this.recycledBlocks.set(block.type, block);\n  }\n\n  /**\n   * Returns a block from the cache of recycled blocks with the given type, or\n   * undefined if one cannot be found.\n   *\n   * @param blockType The type of the block to try to recycle.\n   * @returns The recycled block, or undefined if one could not be recycled.\n   */\n  private getRecycledBlock(blockType: string): Blockly.BlockSvg | undefined {\n    const block = this.recycledBlocks.get(blockType);\n    this.recycledBlocks.delete(blockType);\n    return block;\n  }\n\n  /**\n   * Returns whether the given block can be recycled or not.\n   *\n   * @param block The block to check for recyclability.\n   * @returns True if the block can be recycled. False otherwise.\n   */\n  protected blockIsRecyclable(block: Blockly.Block): boolean {\n    if (!this.recyclingEnabled) return false;\n\n    if (this.recycleEligibilityChecker) {\n      return this.recycleEligibilityChecker(block);\n    }\n\n    // If the block needs to parse mutations, never recycle.\n    if (\n      block.mutationToDom ||\n      block.domToMutation ||\n      block.saveExtraState ||\n      block.loadExtraState\n    ) {\n      return false;\n    }\n\n    if (!block.isEnabled()) return false;\n\n    for (const input of block.inputList) {\n      for (const field of input.fieldRow) {\n        // No variables.\n        if (field.referencesVariables()) return false;\n\n        if (field instanceof Blockly.FieldDropdown) {\n          if (field.isOptionListDynamic()) return false;\n        }\n      }\n      // Check children.\n      if (input.connection) {\n        const targetBlock = input.connection.targetBlock();\n        if (targetBlock && !this.blockIsRecyclable(targetBlock)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Disposes of the provided block.\n   *\n   * @param item The block to dispose of.\n   */\n  override disposeItem(item: Blockly.FlyoutItem) {\n    const element = item.getElement();\n    if (\n      element instanceof Blockly.BlockSvg &&\n      this.blockIsRecyclable(element)\n    ) {\n      this.removeListeners(element.id);\n      this.recycleBlock(element);\n    } else {\n      super.disposeItem(item);\n    }\n  }\n\n  /**\n   * Clears the cache of recycled blocks.\n   */\n  emptyRecycledBlocks() {\n    this.recycledBlocks.forEach((block) => block.dispose(false, false));\n    this.recycledBlocks.clear();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Flyout that supports always-open continuous scrolling.\n */\n\nimport * as Blockly from 'blockly/core';\nimport {ContinuousToolbox} from './ContinuousToolbox';\nimport {ContinuousFlyoutMetrics} from './ContinuousFlyoutMetrics';\nimport {RecyclableBlockFlyoutInflater} from './RecyclableBlockFlyoutInflater';\n\nexport interface LabelFlyoutItem extends Blockly.FlyoutItem {\n  // Blockly.FlyoutButton represents both buttons and labels; a label is just\n  // a borderless, non-clickable button.\n  getElement(): Blockly.FlyoutButton;\n}\n\n/**\n * Class for continuous flyout.\n */\nexport class ContinuousFlyout extends Blockly.VerticalFlyout {\n  /**\n   * Target scroll position, used to smoothly scroll to a given category\n   * location when selected.\n   */\n  private scrollTarget?: number;\n\n  /**\n   * Map from category name to its position in the flyout.\n   */\n  private scrollPositions = new Map<string, number>();\n\n  /**\n   * The percentage of the distance to the scrollTarget that should be\n   * scrolled at a time. Lower values will produce a smoother, slower scroll.\n   */\n  protected scrollAnimationFraction = 0.3;\n\n  /**\n   * Prevents the flyout from closing automatically when a block is dragged out.\n   */\n  override autoClose = false;\n\n  /**\n   * Creates a new ContinuousFlyout.\n   *\n   * @param workspaceOptions The injection options for the flyout's workspace.\n   */\n  constructor(workspaceOptions: Blockly.Options) {\n    super(workspaceOptions);\n\n    this.getWorkspace().setMetricsManager(\n      new ContinuousFlyoutMetrics(this.getWorkspace(), this),\n    );\n\n    this.getWorkspace().addChangeListener((e: Blockly.Events.Abstract) => {\n      if (e.type === Blockly.Events.VIEWPORT_CHANGE) {\n        this.selectCategoryByScrollPosition(-this.getWorkspace().scrollY);\n      }\n    });\n\n    this.setRecyclingEnabled(true);\n  }\n\n  /**\n   * Gets parent toolbox.\n   * Since we registered the ContinuousToolbox, we know that's its type.\n   *\n   * @returns Toolbox that owns this flyout.\n   */\n  private getParentToolbox(): ContinuousToolbox {\n    return this.targetWorkspace.getToolbox() as ContinuousToolbox;\n  }\n\n  /**\n   * Records scroll position for each category in the toolbox.\n   * The scroll position is determined by the coordinates of each category's\n   * label after the entire flyout has been rendered.\n   */\n  private recordScrollPositions() {\n    this.scrollPositions.clear();\n    this.getContents()\n      .filter(this.toolboxItemIsLabel.bind(this))\n      .map((item) => item.getElement())\n      .forEach((label) => {\n        this.scrollPositions.set(\n          label.getButtonText(),\n          Math.max(0, label.getPosition().y - this.GAP_Y / 2),\n        );\n      });\n  }\n\n  /**\n   * Validates and typechecks that the given toolbox item represents a label.\n   *\n   * @param item The toolbox item to check.\n   * @returns True if the item represents a label in the flyout, and is a\n   *     Blockly.FlyoutButton.\n   */\n  protected toolboxItemIsLabel(\n    item: Blockly.FlyoutItem,\n  ): item is LabelFlyoutItem {\n    const element = item.getElement();\n    return !!(\n      item.getType() === 'label' &&\n      // Note that `FlyoutButton` represents both buttons and labels.\n      element instanceof Blockly.FlyoutButton &&\n      element.isLabel() &&\n      this.getParentToolbox().getCategoryByName(element.getButtonText())\n    );\n  }\n\n  /**\n   * Returns the scroll position for the given category name.\n   *\n   * @param name Category name.\n   * @returns Scroll position for given category in workspace units, or null if\n   *     not found.\n   */\n  getCategoryScrollPosition(name: string): number | null {\n    const position = this.scrollPositions.get(name);\n    if (position === undefined) {\n      console.warn(`Scroll position not recorded for category ${name}`);\n    }\n    return position ?? null;\n  }\n\n  /**\n   * Selects an item in the toolbox based on the scroll position of the flyout.\n   *\n   * @param position Current scroll position of the workspace.\n   */\n  private selectCategoryByScrollPosition(position: number) {\n    // If we are currently auto-scrolling, due to selecting a category by\n    // clicking on it, do not update the category selection.\n    if (this.scrollTarget) return;\n\n    const scaledPosition = Math.round(position / this.getWorkspace().scale);\n    // Traverse the array of scroll positions in reverse, so we can select the\n    // furthest category that the scroll position is beyond.\n    for (const [name, position] of [\n      ...this.scrollPositions.entries(),\n    ].reverse()) {\n      if (scaledPosition >= position) {\n        this.getParentToolbox().selectCategoryByName(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Scrolls the flyout to given position.\n   *\n   * @param position The Y coordinate to scroll to.\n   */\n  scrollTo(position: number) {\n    // Set the scroll target to either the scaled position or the lowest\n    // possible scroll point, whichever is smaller.\n    const metrics = this.getWorkspace().getMetrics();\n    this.scrollTarget = Math.min(\n      position * this.getWorkspace().scale,\n      metrics.scrollHeight - metrics.viewHeight,\n    );\n\n    this.stepScrollAnimation();\n  }\n\n  /**\n   * Scrolls the flyout to display the given category at the top.\n   *\n   * @param category The toolbox category to scroll to in the flyout.\n   */\n  scrollToCategory(category: Blockly.ISelectableToolboxItem) {\n    const position = this.scrollPositions.get(category.getName());\n    if (position === undefined) {\n      console.warn(`Scroll position not recorded for category ${name}`);\n      return;\n    }\n    this.scrollTo(position);\n  }\n\n  /**\n   * Step the scrolling animation by scrolling a fraction of the way to\n   * a scroll target, and request the next frame if necessary.\n   */\n  private stepScrollAnimation() {\n    if (this.scrollTarget === undefined) return;\n    const currentScrollPos = -this.getWorkspace().scrollY;\n    const diff = this.scrollTarget - currentScrollPos;\n    if (Math.abs(diff) < 1) {\n      this.getWorkspace().scrollbar?.setY(this.scrollTarget);\n      this.scrollTarget = undefined;\n      return;\n    }\n    this.getWorkspace().scrollbar?.setY(\n      currentScrollPos + diff * this.scrollAnimationFraction,\n    );\n\n    requestAnimationFrame(this.stepScrollAnimation.bind(this));\n  }\n\n  /**\n   * Handles mouse wheel events.\n   *\n   * @param e The mouse wheel event to handle.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override wheel_(e: WheelEvent) {\n    // Don't scroll in response to mouse wheel events if we're currently\n    // animating scrolling to a category.\n    if (this.scrollTarget) return;\n\n    super.wheel_(e);\n  }\n\n  /**\n   * Calculates the additional padding needed at the bottom of the flyout in\n   * order to make it possible to scroll to the top of the last category.\n   *\n   * @param contentMetrics Content metrics for the flyout.\n   * @param viewMetrics View metrics for the flyout.\n   * @returns The additional bottom padding needed.\n   */\n  calculateBottomPadding(\n    contentMetrics: Blockly.MetricsManager.ContainerRegion,\n    viewMetrics: Blockly.MetricsManager.ContainerRegion,\n  ): number {\n    if (this.scrollPositions.size === 0) return 0;\n\n    const lastPosition =\n      ([...this.scrollPositions.values()].pop() ?? 0) *\n      this.getWorkspace().scale;\n    const lastCategoryHeight = contentMetrics.height - lastPosition;\n    if (lastCategoryHeight < viewMetrics.height) {\n      return viewMetrics.height - lastCategoryHeight;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Returns the X coordinate for the flyout's position.\n   */\n  override getX(): number {\n    if (\n      this.isVisible() &&\n      // Make sure that this flyout is associated with a toolbox and not e.g.\n      // a simple flyout or the trashcan flyout.\n      this.targetWorkspace.toolboxPosition === this.toolboxPosition_ &&\n      this.targetWorkspace.getToolbox() &&\n      this.toolboxPosition_ !== Blockly.utils.toolbox.Position.LEFT\n    ) {\n      // This makes it so blocks cannot go under the flyout in RTL mode.\n      return this.targetWorkspace.getMetricsManager().getViewMetrics().width;\n    }\n\n    return super.getX();\n  }\n\n  /**\n   * Displays the given contents in the flyout.\n   *\n   * @param flyoutDef A string or JSON object specifying the contents of the\n   *     flyout.\n   */\n  override show(flyoutDef: Blockly.utils.toolbox.FlyoutDefinition | string) {\n    super.show(flyoutDef);\n    this.recordScrollPositions();\n    this.getWorkspace().resizeContents();\n    if (!this.getParentToolbox().getSelectedItem()) {\n      this.selectCategoryByScrollPosition(0);\n    }\n    this.getRecyclableInflater().emptyRecycledBlocks();\n  }\n\n  /**\n   * Sets the function used to determine whether a block is recyclable.\n   *\n   * @param func The function used to determine if a block is recyclable.\n   */\n  setBlockIsRecyclable(func: (block: Blockly.Block) => boolean) {\n    this.getRecyclableInflater().recycleEligibilityChecker = func;\n  }\n\n  /**\n   * Set whether the flyout can recycle blocks.\n   *\n   * @param isEnabled True to allow blocks to be recycled, false otherwise.\n   */\n  setRecyclingEnabled(isEnabled: boolean) {\n    this.getRecyclableInflater().recyclingEnabled = isEnabled;\n  }\n\n  /**\n   * Returns the recyclable block flyout inflater.\n   *\n   * @returns The recyclable inflater.\n   */\n  protected getRecyclableInflater(): RecyclableBlockFlyoutInflater {\n    const inflater = this.getInflaterForType('block');\n    if (!(inflater instanceof RecyclableBlockFlyoutInflater)) {\n      throw new Error('The RecyclableBlockFlyoutInflater is not registered.');\n    }\n\n    return inflater;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Overrides metrics to exclude the flyout from the viewport.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/** Computes metrics for a toolbox with an always open flyout. */\nexport class ContinuousMetrics extends Blockly.MetricsManager {\n  /**\n   * Computes the viewport size to not include the toolbox and the flyout.\n   * The default viewport includes the flyout.\n   *\n   * @param getWorkspaceCoordinates True to get the view metrics in workspace\n   *     coordinates, false to get them in pixel coordinates.\n   * @returns The width, height, top and left of the viewport in either\n   *     workspace coordinates or pixel coordinates.\n   */\n  override getViewMetrics(\n    getWorkspaceCoordinates = false,\n  ): Blockly.MetricsManager.ContainerRegion {\n    const scale = getWorkspaceCoordinates ? this.workspace_.scale : 1;\n    const svgMetrics = this.getSvgMetrics();\n    const toolboxMetrics = this.getToolboxMetrics();\n    const flyoutMetrics = this.getFlyoutMetrics(false);\n    const toolboxPosition = toolboxMetrics.position;\n\n    if (this.workspace_.getToolbox()) {\n      // Note: Not actually supported at this time due to ContinuousToolbox\n      // only supporting a vertical flyout. But included for completeness.\n      if (\n        toolboxPosition == Blockly.TOOLBOX_AT_TOP ||\n        toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM\n      ) {\n        svgMetrics.height -= toolboxMetrics.height + flyoutMetrics.height;\n      } else if (\n        toolboxPosition == Blockly.TOOLBOX_AT_LEFT ||\n        toolboxPosition == Blockly.TOOLBOX_AT_RIGHT\n      ) {\n        svgMetrics.width -= toolboxMetrics.width + flyoutMetrics.width;\n      }\n    }\n    return {\n      height: svgMetrics.height / scale,\n      width: svgMetrics.width / scale,\n      top: -this.workspace_.scrollY / scale,\n      left: -this.workspace_.scrollX / scale,\n    };\n  }\n\n  /**\n   * Gets the absolute left and absolute top in pixel coordinates.\n   * This is where the visible workspace starts in relation to the SVG\n   * container, adjusted to not include the area behind the flyout.\n   *\n   * @returns The absolute metrics for the workspace.\n   */\n  override getAbsoluteMetrics(): Blockly.MetricsManager.AbsoluteMetrics {\n    const toolboxMetrics = this.getToolboxMetrics();\n    const flyoutMetrics = this.getFlyoutMetrics(false);\n    const toolboxPosition = toolboxMetrics.position;\n    let absoluteLeft = 0;\n\n    if (\n      this.workspace_.getToolbox() &&\n      toolboxPosition == Blockly.TOOLBOX_AT_LEFT\n    ) {\n      absoluteLeft = toolboxMetrics.width + flyoutMetrics.width;\n    }\n    let absoluteTop = 0;\n    if (\n      this.workspace_.getToolbox() &&\n      toolboxPosition == Blockly.TOOLBOX_AT_TOP\n    ) {\n      absoluteTop = toolboxMetrics.height + flyoutMetrics.height;\n    }\n    return {\n      top: absoluteTop,\n      left: absoluteLeft,\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Toolbox that uses a continuous scrolling flyout.\n */\n\nimport * as Blockly from 'blockly/core';\nimport {ContinuousFlyout} from './ContinuousFlyout';\n\n/**\n * Class for continuous toolbox.\n */\nexport class ContinuousToolbox extends Blockly.Toolbox {\n  /**\n   * Timeout ID used to prevent refreshing the flyout during extensive block\n   * changes.\n   */\n  private refreshDebouncer?: ReturnType<typeof setTimeout>;\n\n  /**\n   * Initializes the continuous toolbox.\n   */\n  override init() {\n    super.init();\n\n    // Populate the flyout with all blocks and show it immediately.\n    const flyout = this.getFlyout();\n    flyout.show(this.getInitialFlyoutContents());\n\n    this.getWorkspace().addChangeListener((e: Blockly.Events.Abstract) => {\n      if (\n        e.type === Blockly.Events.BLOCK_CREATE ||\n        e.type === Blockly.Events.BLOCK_DELETE ||\n        e.type === Blockly.Events.BLOCK_CHANGE\n      ) {\n        this.refreshSelection();\n      }\n    });\n  }\n\n  /**\n   * Returns the continuous toolbox's flyout.\n   *\n   * @returns The toolbox's flyout.\n   */\n  override getFlyout(): ContinuousFlyout {\n    return super.getFlyout() as ContinuousFlyout;\n  }\n\n  /**\n   * Gets the contents that should be shown in the flyout immediately.\n   * This includes all blocks and labels for each category of block.\n   *\n   * @returns Flyout contents.\n   */\n  private getInitialFlyoutContents(): Blockly.utils.toolbox.FlyoutItemInfoArray {\n    return this.getToolboxItems().flatMap(this.convertToolboxItemToFlyoutItems);\n  }\n\n  /**\n   * Converts a given toolbox item to an array of flyout items, generally a\n   * label followed by the category's blocks.\n   *\n   * @param toolboxItem The toolbox item/category to convert.\n   * @returns An array of flyout items contained in the given toolbox item.\n   */\n  protected convertToolboxItemToFlyoutItems(\n    toolboxItem: Blockly.IToolboxItem,\n  ): Blockly.utils.toolbox.FlyoutItemInfoArray {\n    let contents: Blockly.utils.toolbox.FlyoutItemInfoArray = [];\n    if (toolboxItem instanceof Blockly.ToolboxCategory) {\n      // Create a label node to go at the top of the category\n      contents.push({kind: 'LABEL', text: toolboxItem.getName()});\n      let itemContents = toolboxItem.getContents();\n\n      // Handle custom categories (e.g. variables and functions)\n      if (typeof itemContents === 'string') {\n        itemContents = [{custom: itemContents, kind: 'CATEGORY'}];\n      }\n      contents = contents.concat(itemContents);\n    }\n    return contents;\n  }\n\n  /**\n   * Updates the flyout's contents if it is visible.\n   */\n  override refreshSelection() {\n    if (this.getFlyout().isVisible()) {\n      if (this.refreshDebouncer) {\n        clearTimeout(this.refreshDebouncer);\n      }\n      this.refreshDebouncer = setTimeout(() => {\n        this.getFlyout().show(this.getInitialFlyoutContents());\n      }, 100);\n    }\n  }\n\n  /**\n   * Scrolls the flyout to display the newly selected category's contents.\n   *\n   * @param oldItem The previously selected toolbox category.\n   * @param newItem The newly selected toolbox category.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  override updateFlyout_(\n    oldItem: Blockly.ISelectableToolboxItem | null,\n    newItem: Blockly.ISelectableToolboxItem | null,\n  ) {\n    if (newItem) {\n      this.getFlyout().scrollToCategory(newItem);\n      if (!this.getFlyout().isVisible()) {\n        this.getFlyout().show(this.getInitialFlyoutContents());\n      }\n    } else if (this.getFlyout().autoClose) {\n      this.getFlyout().hide();\n    }\n  }\n\n  /**\n   * Returns whether or not the toolbox should deselect the old category.\n   *\n   * @param oldItem The previously selected toolbox category.\n   * @param newItem The newly selected toolbox category.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  override shouldDeselectItem_(\n    oldItem: Blockly.ISelectableToolboxItem | null,\n    newItem: Blockly.ISelectableToolboxItem | null,\n  ): boolean {\n    // Should not deselect if the same category is clicked again.\n    return !!(oldItem && oldItem !== newItem);\n  }\n\n  /**\n   * Gets a category by name.\n   *\n   * @param name Name of category to get.\n   * @returns Category, or null if not found.\n   * @internal\n   */\n  getCategoryByName(name: string): Blockly.ISelectableToolboxItem | null {\n    const category = this.getToolboxItems().find(\n      (item) =>\n        item instanceof Blockly.ToolboxCategory &&\n        item.isSelectable() &&\n        name === item.getName(),\n    );\n    if (!category) return null;\n    return category as Blockly.ISelectableToolboxItem;\n  }\n\n  /**\n   * Selects the category with the given name.\n   * Similar to setSelectedItem, but importantly, does not call updateFlyout\n   * because this is called while the flyout is being scrolled.\n   *\n   * @param name Name of category to select.\n   * @internal\n   */\n  selectCategoryByName(name: string) {\n    const newItem = this.getCategoryByName(name);\n    if (!newItem) return;\n\n    const oldItem = this.selectedItem_;\n\n    if (oldItem && this.shouldDeselectItem_(oldItem, newItem)) {\n      this.deselectItem_(oldItem);\n    }\n\n    if (this.shouldSelectItem_(oldItem, newItem)) {\n      this.selectItem_(oldItem, newItem);\n    }\n  }\n\n  /**\n   * Returns the bounding rectangle of the drag target/deletion area in pixels\n   * relative to the viewport.\n   *\n   * @returns The toolbox's bounding box. Null if drag target area should be\n   *     ignored.\n   */\n  override getClientRect(): Blockly.utils.Rect | null {\n    // If the flyout never closes, it should be the deletable area.\n    const flyout = this.getFlyout();\n    if (flyout && !flyout.autoClose) {\n      return flyout.getClientRect();\n    }\n    return super.getClientRect();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Continuous-scroll toolbox and flyout that is always open.\n */\n\nimport * as Blockly from 'blockly/core';\n\nimport {ContinuousCategory} from './ContinuousCategory';\nimport {ContinuousFlyout, LabelFlyoutItem} from './ContinuousFlyout';\nimport {ContinuousMetrics} from './ContinuousMetrics';\nimport {ContinuousToolbox} from './ContinuousToolbox';\nimport {RecyclableBlockFlyoutInflater} from './RecyclableBlockFlyoutInflater';\n\nexport {\n  ContinuousCategory,\n  ContinuousFlyout,\n  ContinuousMetrics,\n  ContinuousToolbox,\n  LabelFlyoutItem,\n  RecyclableBlockFlyoutInflater,\n};\n\n/**\n * Registers the components of the continuous toolbox, replacing Blockly's\n * built-in defaults.\n */\nexport function registerContinuousToolbox() {\n  Blockly.registry.register(\n    Blockly.registry.Type.TOOLBOX_ITEM,\n    Blockly.ToolboxCategory.registrationName,\n    ContinuousCategory,\n    true,\n  );\n\n  Blockly.registry.register(\n    Blockly.registry.Type.METRICS_MANAGER,\n    'ContinuousMetrics',\n    ContinuousMetrics,\n    true,\n  );\n\n  Blockly.registry.register(\n    Blockly.registry.Type.FLYOUTS_VERTICAL_TOOLBOX,\n    'ContinuousFlyout',\n    ContinuousFlyout,\n    true,\n  );\n\n  Blockly.registry.register(\n    Blockly.registry.Type.TOOLBOX,\n    'ContinuousToolbox',\n    ContinuousToolbox,\n    true,\n  );\n\n  Blockly.registry.register(\n    Blockly.registry.Type.FLYOUT_INFLATER,\n    'block',\n    RecyclableBlockFlyoutInflater,\n    true,\n  );\n\n  Blockly.Css.register(`\n  .categoryBubble {\n    margin: 0 auto 0.125rem;\n    border-radius: 100%;\n    border: 1px solid;\n    width: 1.25rem;\n    height: 1.25rem;\n  }\n  .blocklyToolboxCategory {\n    height: initial;\n    padding: 3px 0;\n  }\n  .blocklyTreeRowContentContainer {\n    display: flex;\n    flex-direction: column;\n  }\n  .blocklyTreeLabel {\n    margin: auto;\n  }\n  .blocklyToolboxCategoryLabel {\n    text-align: center;\n  }\n  `);\n}\n"],
  "mappings": ";;;;;;;AAAA,gCAAoB;AACbrJG,IAAM,qBAAN,cAAyC,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrD,gBAAgBC,OAAuB;AAC9C,UAAM,QAAQ,SAAS,cAAc,KAAK;AAC1C,UAAM,aAAa,MAAM,KAAK,MAAM,IAAI,QAAQ;AAChD,UAAM,cAAcA;AACpB,UAAM,UAAU,IAAI,KAAK,WAAW,OAAO,KAAK,EAAE;AAClD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,iBAA0B;AACjC,UAAM,OAAO,SAAS,cAAc,KAAK;AACzC,SAAK,UAAU,IAAI,gBAAgB;AACnC,SAAK,MAAM,kBAAkB,KAAK;AAClC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMS,mBAAmB;AAAA,EAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOS,YAAY,YAAqB;AACxC,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,SAAU;AACrC,QAAI,YAAY;AACd,WAAK,QAAQ,MAAM,kBAAkB;AACrC,MAAQ,MAAM,IAAI;AAAA,QAChB,KAAK;AAAA,QACL,KAAK,WAAW,UAAU,KAAK;AAAA,MACjC;AAAA,IACF,OAAO;AACL,WAAK,QAAQ,MAAM,kBAAkB;AACrC,MAAQ,MAAM,IAAI;AAAA,QAChB,KAAK;AAAA,QACL,KAAK,WAAW,UAAU,KAAK;AAAA,MACjC;AAAA,IACF;AACA,IAAQ,MAAM,KAAK;AAAA,MACjB,KAAK;AAAA,MACG,MAAM,KAAK,MAAM;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AACF;;;ACnEO,IAAM,0BAAN,cAA8C,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc/D,iBACP,yBACA,mBACA,sBACA;AACA,UAAM,gBAAgB,MAAM;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,iBACJ,wBAAwB,KAAK,kBAAkB,uBAAuB;AACxE,UAAM,cACJ,qBAAqB,KAAK,eAAe,uBAAuB;AAElE,QAAI,eAAe;AACjB,oBAAc,UACZ,KAAK,QACL,uBAAuB,gBAAgB,WAAW;AAAA,IACtD;AACA,WAAO;AAAA,EACT;AACF;;;ACnCO,IAAM,gCAAN,cAAoD,oBAAoB;AAAA,EAAxE;AAAA;AAIL;AAAA;AAAA;AAAA,4CAAmB;AAKnB;AAAA;AAAA;AAAA,wBAAQ,kBAAiB,oBAAI,IAA8B;AAK3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,YACP,iBACA,WACkB;AAClB,UAAM,YAAY,KAAK,sBAAsB,eAAe;AAC5D,WACE,KAAK,iBAAiB,SAAS,KAC/B,MAAM,YAAY,iBAAiB,SAAS;AAAA,EAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,sBACN,iBACQ;AACR,QAAI;AACJ,QAAI,gBAAgB,UAAU,GAAG;AAC/B,YAAM,MACJ,OAAO,gBAAgB,UAAU,MAAM,WAC3B,MAAM,IAAI,UAAU,gBAAgB,UAAU,CAAC,IACtD,gBAAgB,UAAU;AACjC,aAAO,IAAI,aAAa,MAAM;AAAA,IAChC,OAAO;AACL,aAAO,gBAAgB,MAAM;AAAA,IAC/B;AAEA,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,oDAAoD,KAAK;AAAA,UACvD;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,aAAa,OAAyB;AAC5C,UAAM,KAAK,MAAM,uBAAuB;AACxC,UAAM,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;AACzB,SAAK,eAAe,IAAI,MAAM,MAAM,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,iBAAiB,WAAiD;AACxE,UAAM,QAAQ,KAAK,eAAe,IAAI,SAAS;AAC/C,SAAK,eAAe,OAAO,SAAS;AACpC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQU,kBAAkB,OAA+B;AACzD,QAAI,CAAC,KAAK,iBAAkB,QAAO;AAEnC,QAAI,KAAK,2BAA2B;AAClC,aAAO,KAAK,0BAA0B,KAAK;AAAA,IAC7C;AAGA,QACE,MAAM,iBACN,MAAM,iBACN,MAAM,kBACN,MAAM,gBACN;AACA,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,MAAM,UAAU,EAAG,QAAO;AAE/B,eAAW,SAAS,MAAM,WAAW;AACnC,iBAAW,SAAS,MAAM,UAAU;AAElC,YAAI,MAAM,oBAAoB,EAAG,QAAO;AAExC,YAAI,iBAAyB,eAAe;AAC1C,cAAI,MAAM,oBAAoB,EAAG,QAAO;AAAA,QAC1C;AAAA,MACF;AAEA,UAAI,MAAM,YAAY;AACpB,cAAM,cAAc,MAAM,WAAW,YAAY;AACjD,YAAI,eAAe,CAAC,KAAK,kBAAkB,WAAW,GAAG;AACvD,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOS,YAAY,MAA0B;AAC7C,UAAM,UAAU,KAAK,WAAW;AAChC,QACE,mBAA2B,YAC3B,KAAK,kBAAkB,OAAO,GAC9B;AACA,WAAK,gBAAgB,QAAQ,EAAE;AAC/B,WAAK,aAAa,OAAO;AAAA,IAC3B,OAAO;AACL,YAAM,YAAY,IAAI;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB;AACpB,SAAK,eAAe,QAAQ,CAAC,UAAU,MAAM,QAAQ,OAAO,KAAK,CAAC;AAClE,SAAK,eAAe,MAAM;AAAA,EAC5B;AACF;;;ACnJO,IAAM,mBAAN,cAAuC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4B3D,YAAY,kBAAmC;AAC7C,UAAM,gBAAgB;AAxBxB;AAAA;AAAA;AAAA;AAAA,wBAAQ;AAKR;AAAA;AAAA;AAAA,wBAAQ,mBAAkB,oBAAI,IAAoB;AAMlD;AAAA;AAAA;AAAA;AAAA,wBAAU,2BAA0B;AAKpC;AAAA;AAAA;AAAA,wBAAS,aAAY;AAUnB,SAAK,aAAa,EAAE;AAAA,MAClB,IAAI,wBAAwB,KAAK,aAAa,GAAG,IAAI;AAAA,IACvD;AAEA,SAAK,aAAa,EAAE,kBAAkB,CAAC,MAA+B;AACpE,UAAI,EAAE,SAAiB,OAAO,iBAAiB;AAC7C,aAAK,+BAA+B,CAAC,KAAK,aAAa,EAAE,OAAO;AAAA,MAClE;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,IAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,mBAAsC;AAC5C,WAAO,KAAK,gBAAgB,WAAW;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,wBAAwB;AAC9B,SAAK,gBAAgB,MAAM;AAC3B,SAAK,YAAY,EACd,OAAO,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACzC,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,EAC/B,QAAQ,CAAC,UAAU;AAClB,WAAK,gBAAgB;AAAA,QACnB,MAAM,cAAc;AAAA,QACpB,KAAK,IAAI,GAAG,MAAM,YAAY,EAAE,IAAI,KAAK,QAAQ,CAAC;AAAA,MACpD;AAAA,IACF,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASU,mBACR,MACyB;AACzB,UAAM,UAAU,KAAK,WAAW;AAChC,WAAO,CAAC,EACN,KAAK,QAAQ,MAAM;AAAA,IAEnB,mBAA2B,gBAC3B,QAAQ,QAAQ,KAChB,KAAK,iBAAiB,EAAE,kBAAkB,QAAQ,cAAc,CAAC;AAAA,EAErE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0BC,OAA6B;AACrD,UAAM,WAAW,KAAK,gBAAgB,IAAIA,KAAI;AAC9C,QAAI,aAAa,QAAW;AAC1B,cAAQ,KAAK,6CAA6CA,KAAI,EAAE;AAAA,IAClE;AACA,WAAO,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,+BAA+B,UAAkB;AAGvD,QAAI,KAAK,aAAc;AAEvB,UAAM,iBAAiB,KAAK,MAAM,WAAW,KAAK,aAAa,EAAE,KAAK;AAGtE,eAAW,CAACA,OAAMC,SAAQ,KAAK;AAAA,MAC7B,GAAG,KAAK,gBAAgB,QAAQ;AAAA,IAClC,EAAE,QAAQ,GAAG;AACX,UAAI,kBAAkBA,WAAU;AAC9B,aAAK,iBAAiB,EAAE,qBAAqBD,KAAI;AACjD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,UAAkB;AAGzB,UAAM,UAAU,KAAK,aAAa,EAAE,WAAW;AAC/C,SAAK,eAAe,KAAK;AAAA,MACvB,WAAW,KAAK,aAAa,EAAE;AAAA,MAC/B,QAAQ,eAAe,QAAQ;AAAA,IACjC;AAEA,SAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,UAA0C;AACzD,UAAM,WAAW,KAAK,gBAAgB,IAAI,SAAS,QAAQ,CAAC;AAC5D,QAAI,aAAa,QAAW;AAC1B,cAAQ,KAAK,6CAA6C,IAAI,EAAE;AAChE;AAAA,IACF;AACA,SAAK,SAAS,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,sBAAsB;AA7LhC;AA8LI,QAAI,KAAK,iBAAiB,OAAW;AACrC,UAAM,mBAAmB,CAAC,KAAK,aAAa,EAAE;AAC9C,UAAM,OAAO,KAAK,eAAe;AACjC,QAAI,KAAK,IAAI,IAAI,IAAI,GAAG;AACtB,iBAAK,aAAa,EAAE,cAApB,mBAA+B,KAAK,KAAK;AACzC,WAAK,eAAe;AACpB;AAAA,IACF;AACA,eAAK,aAAa,EAAE,cAApB,mBAA+B;AAAA,MAC7B,mBAAmB,OAAO,KAAK;AAAA;AAGjC,0BAAsB,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQmB,OAAO,GAAe;AAGvC,QAAI,KAAK,aAAc;AAEvB,UAAM,OAAO,CAAC;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,uBACE,gBACA,aACQ;AACR,QAAI,KAAK,gBAAgB,SAAS,EAAG,QAAO;AAE5C,UAAM,gBACH,CAAC,GAAG,KAAK,gBAAgB,OAAO,CAAC,EAAE,IAAI,KAAK,KAC7C,KAAK,aAAa,EAAE;AACtB,UAAM,qBAAqB,eAAe,SAAS;AACnD,QAAI,qBAAqB,YAAY,QAAQ;AAC3C,aAAO,YAAY,SAAS;AAAA,IAC9B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKS,OAAe;AACtB,QACE,KAAK,UAAU;AAAA;AAAA,IAGf,KAAK,gBAAgB,oBAAoB,KAAK,oBAC9C,KAAK,gBAAgB,WAAW,KAChC,KAAK,qBAA6B,MAAM,QAAQ,SAAS,MACzD;AAEA,aAAO,KAAK,gBAAgB,kBAAkB,EAAE,eAAe,EAAE;AAAA,IACnE;AAEA,WAAO,MAAM,KAAK;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,KAAK,WAA4D;AACxE,UAAM,KAAK,SAAS;AACpB,SAAK,sBAAsB;AAC3B,SAAK,aAAa,EAAE,eAAe;AACnC,QAAI,CAAC,KAAK,iBAAiB,EAAE,gBAAgB,GAAG;AAC9C,WAAK,+BAA+B,CAAC;AAAA,IACvC;AACA,SAAK,sBAAsB,EAAE,oBAAoB;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,MAAyC;AAC5D,SAAK,sBAAsB,EAAE,4BAA4B;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,WAAoB;AACtC,SAAK,sBAAsB,EAAE,mBAAmB;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,wBAAuD;AAC/D,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,QAAI,EAAE,oBAAoB,gCAAgC;AACxD,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,WAAO;AAAA,EACT;AACF;;;ACzSO,IAAM,oBAAN,cAAwC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUnD,eACP,0BAA0B,OACc;AACxC,UAAM,QAAQ,0BAA0B,KAAK,WAAW,QAAQ;AAChE,UAAM,aAAa,KAAK,cAAc;AACtC,UAAM,iBAAiB,KAAK,kBAAkB;AAC9C,UAAM,gBAAgB,KAAK,iBAAiB,KAAK;AACjD,UAAM,kBAAkB,eAAe;AAEvC,QAAI,KAAK,WAAW,WAAW,GAAG;AAGhC,UACE,mBAA2B,kBAC3B,mBAA2B,mBAC3B;AACA,mBAAW,UAAU,eAAe,SAAS,cAAc;AAAA,MAC7D,WACE,mBAA2B,mBAC3B,mBAA2B,kBAC3B;AACA,mBAAW,SAAS,eAAe,QAAQ,cAAc;AAAA,MAC3D;AAAA,IACF;AACA,WAAO;AAAA,MACL,QAAQ,WAAW,SAAS;AAAA,MAC5B,OAAO,WAAW,QAAQ;AAAA,MAC1B,KAAK,CAAC,KAAK,WAAW,UAAU;AAAA,MAChC,MAAM,CAAC,KAAK,WAAW,UAAU;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,qBAA6D;AACpE,UAAM,iBAAiB,KAAK,kBAAkB;AAC9C,UAAM,gBAAgB,KAAK,iBAAiB,KAAK;AACjD,UAAM,kBAAkB,eAAe;AACvC,QAAI,eAAe;AAEnB,QACE,KAAK,WAAW,WAAW,KAC3B,mBAA2B,iBAC3B;AACA,qBAAe,eAAe,QAAQ,cAAc;AAAA,IACtD;AACA,QAAI,cAAc;AAClB,QACE,KAAK,WAAW,WAAW,KAC3B,mBAA2B,gBAC3B;AACA,oBAAc,eAAe,SAAS,cAAc;AAAA,IACtD;AACA,WAAO;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AACF;;;ACtEO,IAAM,oBAAN,cAAwC,QAAQ;AAAA,EAAhD;AAAA;AAKL;AAAA;AAAA;AAAA;AAAA,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKC,OAAO;AACd,UAAM,KAAK;AAGX,UAAM,SAAS,KAAK,UAAU;AAC9B,WAAO,KAAK,KAAK,yBAAyB,CAAC;AAE3C,SAAK,aAAa,EAAE,kBAAkB,CAAC,MAA+B;AACpE,UACE,EAAE,SAAiB,OAAO,gBAC1B,EAAE,SAAiB,OAAO,gBAC1B,EAAE,SAAiB,OAAO,cAC1B;AACA,aAAK,iBAAiB;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOS,YAA8B;AACrC,WAAO,MAAM,UAAU;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,2BAAsE;AAC5E,WAAO,KAAK,gBAAgB,EAAE,QAAQ,KAAK,+BAA+B;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASU,gCACR,aAC2C;AAC3C,QAAI,WAAsD,CAAC;AAC3D,QAAI,uBAA+B,iBAAiB;AAElD,eAAS,KAAK,EAAC,MAAM,SAAS,MAAM,YAAY,QAAQ,EAAC,CAAC;AAC1D,UAAI,eAAe,YAAY,YAAY;AAG3C,UAAI,OAAO,iBAAiB,UAAU;AACpC,uBAAe,CAAC,EAAC,QAAQ,cAAc,MAAM,WAAU,CAAC;AAAA,MAC1D;AACA,iBAAW,SAAS,OAAO,YAAY;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKS,mBAAmB;AAC1B,QAAI,KAAK,UAAU,EAAE,UAAU,GAAG;AAChC,UAAI,KAAK,kBAAkB;AACzB,qBAAa,KAAK,gBAAgB;AAAA,MACpC;AACA,WAAK,mBAAmB,WAAW,MAAM;AACvC,aAAK,UAAU,EAAE,KAAK,KAAK,yBAAyB,CAAC;AAAA,MACvD,GAAG,GAAG;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,cACP,SACA,SACA;AACA,QAAI,SAAS;AACX,WAAK,UAAU,EAAE,iBAAiB,OAAO;AACzC,UAAI,CAAC,KAAK,UAAU,EAAE,UAAU,GAAG;AACjC,aAAK,UAAU,EAAE,KAAK,KAAK,yBAAyB,CAAC;AAAA,MACvD;AAAA,IACF,WAAW,KAAK,UAAU,EAAE,WAAW;AACrC,WAAK,UAAU,EAAE,KAAK;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,oBACP,SACA,SACS;AAET,WAAO,CAAC,EAAE,WAAW,YAAY;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkBE,OAAqD;AACrE,UAAM,WAAW,KAAK,gBAAgB,EAAE;AAAA,MACtC,CAAC,SACC,gBAAwB,mBACxB,KAAK,aAAa,KAClBA,UAAS,KAAK,QAAQ;AAAA,IAC1B;AACA,QAAI,CAAC,SAAU,QAAO;AACtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,qBAAqBA,OAAc;AACjC,UAAM,UAAU,KAAK,kBAAkBA,KAAI;AAC3C,QAAI,CAAC,QAAS;AAEd,UAAM,UAAU,KAAK;AAErB,QAAI,WAAW,KAAK,oBAAoB,SAAS,OAAO,GAAG;AACzD,WAAK,cAAc,OAAO;AAAA,IAC5B;AAEA,QAAI,KAAK,kBAAkB,SAAS,OAAO,GAAG;AAC5C,WAAK,YAAY,SAAS,OAAO;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,gBAA2C;AAElD,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,UAAU,CAAC,OAAO,WAAW;AAC/B,aAAO,OAAO,cAAc;AAAA,IAC9B;AACA,WAAO,MAAM,cAAc;AAAA,EAC7B;AACF;;;ACnKO,SAAS,4BAA4B;AAC1C,EAAQ,SAAS;AAAA,IACP,SAAS,KAAK;AAAA,IACd,gBAAgB;AAAA,IACxB;AAAA,IACA;AAAA,EACF;AAEA,EAAQ,SAAS;AAAA,IACP,SAAS,KAAK;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,EAAQ,SAAS;AAAA,IACP,SAAS,KAAK;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,EAAQ,SAAS;AAAA,IACP,SAAS,KAAK;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,EAAQ,SAAS;AAAA,IACP,SAAS,KAAK;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,EAAQ,IAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsBpB;AACH;",
  "names": ["Blockly", "name", "name", "position", "name"]
}
